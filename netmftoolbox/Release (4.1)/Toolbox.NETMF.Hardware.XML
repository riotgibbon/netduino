<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Toolbox.NETMF.Hardware</name>
    </assembly>
    <members>
        <member name="T:Toolbox.NETMF.Hardware.AdafruitMotorshield">
            <summary>
            Adafruit Motor Control Shield
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.AdafruitMotorshield._EnablePin">
            <summary>Reference to the Enable Pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.AdafruitMotorshield._Motor1aPin">
            <summary>Pin A for motor 1</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.AdafruitMotorshield._Motor1bPin">
            <summary>Pin B for motor 1</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.AdafruitMotorshield._Motor1Pwm">
            <summary>PWM Pin for motor 1</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.AdafruitMotorshield._Motor2aPin">
            <summary>Pin A for motor 2</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.AdafruitMotorshield._Motor2bPin">
            <summary>Pin B for motor 2</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.AdafruitMotorshield._Motor2Pwm">
            <summary>PWM Pin for motor 2</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.AdafruitMotorshield._Motor3aPin">
            <summary>Pin A for motor 3</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.AdafruitMotorshield._Motor3bPin">
            <summary>Pin B for motor 3</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.AdafruitMotorshield._Motor3Pwm">
            <summary>PWM Pin for motor 3</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.AdafruitMotorshield._Motor4aPin">
            <summary>Pin A for motor 4</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.AdafruitMotorshield._Motor4bPin">
            <summary>Pin B for motor 4</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.AdafruitMotorshield._Motor4Pwm">
            <summary>PWM Pin for motor 4</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.AdafruitMotorshield._IcOut">
            <summary>Reference to the one 74HC595 IC</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.AdafruitMotorshield.#ctor(Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,Toolbox.NETMF.Hardware.IPWMPort,Toolbox.NETMF.Hardware.IPWMPort,Toolbox.NETMF.Hardware.IPWMPort,Toolbox.NETMF.Hardware.IPWMPort)">
            <summary>
            
            </summary>
            <param name="ClockPin">SPI Clock pin</param>
            <param name="EnablePin">SPI Enable pin</param>
            <param name="DataPin">SPI Data pin</param>
            <param name="LatchPin">SPI Latch pin</param>
            <param name="Motor1Pwm">Motor 1 PWM pin</param>
            <param name="Motor2Pwm">Motor 2 PWM pin</param>
            <param name="Motor3Pwm">Motor 3 PWM pin</param>
            <param name="Motor4Pwm">Motor 4 PWM pin</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.AdafruitMotorshield.SetState(Toolbox.NETMF.Hardware.AdafruitMotorshield.Motors,System.SByte)">
            <summary>
            Sets the state of a motor
            </summary>
            <param name="Motor">The motor to change</param>
            <param name="Speed">The speed to move with; -100 (full speed backward) to 100 (full speed forward)</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.AdafruitMotorshield.Dispose">
            <summary>
            Disposes the AdafruitMotorshield object
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.AdafruitMotorshield.Motors">
            <summary>
            Contains all motors
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.AdafruitMotorshield.Motors.Motor1">
            <summary>First motor</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.AdafruitMotorshield.Motors.Motor2">
            <summary>Second motor</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.AdafruitMotorshield.Motors.Motor3">
            <summary>Third motor</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.AdafruitMotorshield.Motors.Motor4">
            <summary>Forth motor</summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.AutoRepeatInputPort">
            <summary>
            Represent an extension over an input port, with embedded auto-repeat capabilities.
            This kind of class is well suited for pushbuttons input managements
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.AutoRepeatInputPort.QuantumDuration">
            <summary>
            Indicates the duration of the quantum for the input port sampling,
            and all the related calculations
            </summary>
            <remarks>It is recommended to leave this value as is</remarks>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.AutoRepeatInputPort.DefaultInitialDelay">
            <summary>
            The initial delay used as default.
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.AutoRepeatInputPort.DefaultAutoRepeatPeriod">
            <summary>
            The auto-repeat period used as default
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.AutoRepeatInputPort.#ctor(Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Port.ResistorMode,System.Boolean)">
            <summary>
            Create and open an instance of an input port,
            with embedded auto-repeat capabilities
            </summary>
            <param name="port">The I/O pin selected for the input</param>
            <param name="resistor">The resistor wired-logic easing</param>
            <param name="activeLevel">The level on which the input has to be considered active</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.AutoRepeatInputPort.Worker">
            <summary>
            the working thread handler, as the manager of the auto-repeat
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.AutoRepeatInputPort.Dispose(System.Boolean)">
            <summary>
            Disposes the object
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.AutoRepeatInputPort.OnStateChanged(Toolbox.NETMF.Hardware.AutoRepeatInputPort.AutoRepeatState)">
            <summary>
            
            </summary>
            <param name="state"></param>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.AutoRepeatInputPort.ActiveLevel">
            <summary>
            Gets the active level defined for this instance
            </summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.AutoRepeatInputPort.InitialDelay">
            <summary>
            Get/set the initial delay before the auto-repeat starts. 
            The value is expressed in milliseconds, and is rounded accordingly to the quantum
            </summary>
            <remarks>
            The minimum allowed value is zero, that is an immediate starting of the auto-repeat
            </remarks>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.AutoRepeatInputPort.AutoRepeatPeriod">
            <summary>
            Get/set the interval period of the auto-repeat.
            The value is expressed in milliseconds, and is rounded accordingly to the quantum
            </summary>
            <remarks>
            The minimum value is equal to the quantum (i.e. 100ms)
            </remarks>
        </member>
        <member name="E:Toolbox.NETMF.Hardware.AutoRepeatInputPort.StateChanged">
            <summary>
            Notify any change occurring in the auto-repeat life-cycle
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.AutoRepeatInputPort.AutoRepeatState">
            <summary>
            Enumeration of the possible states issued by the <see cref="E:Toolbox.NETMF.Hardware.AutoRepeatInputPort.StateChanged"/> event
            </summary>
            <remarks>
            Each state is better depicted considering a pushbutton acting on the input port
            </remarks>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.AutoRepeatInputPort.AutoRepeatState.Press">
            <summary>
            The button has just been pressed. This state is always issued, but once only
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.AutoRepeatInputPort.AutoRepeatState.Tick">
            <summary>
            The button has been hold down enough to begin the auto-repeat cycle.
            This state can be issued periodically
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.AutoRepeatInputPort.AutoRepeatState.Release">
            <summary>
            The button has just been depressed. This state is always issued, but once only
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.AutoRepeatEventHandler">
            <summary>
            The delegate behind the <see cref="E:Toolbox.NETMF.Hardware.AutoRepeatInputPort.StateChanged"/> event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.AutoRepeatEventArgs">
            <summary>
            Extension wrapper to the standard <see cref="T:Microsoft.SPOT.EventArgs"/> object, thus the state of the auto-repeat may be carried out to the host
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.AutoRepeatEventArgs.#ctor(Toolbox.NETMF.Hardware.AutoRepeatInputPort.AutoRepeatState)">
            <summary>
            Extension wrapper to the standard <see cref="T:Microsoft.SPOT.EventArgs"/> object, thus the state of the auto-repeat may be carried out to the host
            </summary>
            <param name="state"></param>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.AutoRepeatEventArgs.State">
            <summary>
            
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.BitBangBuzzer">
            <summary>
            Bitbang Buzzer class for if a buzzer isn't conneced to a PWM-pin
            </summary>
            <remarks>
            Sometimes you want to add a buzzer, but all PWM-pins are already taken. This class comes to rescue!
            </remarks>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.BitBangBuzzer._State">
            <summary>
            Contains the current state of the buzzer
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.BitBangBuzzer._OutputPin">
            <summary>
            Contains the pin
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.BitBangBuzzer._PinSwitcherThread">
            <summary>
            Reference to the seperate buzzer thread
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.BitBangBuzzer.#ctor(Microsoft.SPOT.Hardware.Cpu.Pin,System.Boolean)">
            <summary>
            Bit Bang Buzzer
            </summary>
            <remarks>
            Sometimes you want to add a buzzer, but all PWM-pins are already taken. This class comes to rescue!
            </remarks>
            <param name="PortId">The pin the buzzer is connected to (on Netduino: Pins.GPIO_PIN_D3)</param>
            <param name="InitialState">The buzzers initial state</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.BitBangBuzzer._PinSwitcherLoop">
            <summary>
            Switches the pin values if needed
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.BitBangBuzzer.Write(System.Boolean)">
            <summary>
            Writes the state of the buzzer
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.BitBangBuzzer.Read">
            <summary>
            Reads the state of the buzzer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.BitBangBuzzer.Dispose">
            <summary>
            Disposes the buzzer object
            </summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.BitBangBuzzer.Interval">
            <summary>
            Interval of the speaker in ms
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.BlinkM">
            <summary>
            BlinkM RGB LED
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.BlinkM._Device">
            <summary>
            Reference to the I²C bus
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.BlinkM.#ctor(System.UInt16,System.Int32)">
            <summary>
            Initialises a new BlinkM RGB LED
            </summary>
            <param name="Address">The I²C address</param>
            <param name="ClockRateKhz">The module speed in Khz</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.BlinkM.SetColor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Go to RGB Color Now
            </summary>
            <param name="r">Red</param>
            <param name="g">Green</param>
            <param name="b">Blue</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.BlinkM.SetColor(System.Int32)">
            <summary>
            Go to RGB Color Now
            </summary>
            <param name="Color">The color (0xff0000 is Red)</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.BlinkM.FadeColor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Fade to RGB Color
            </summary>
            <param name="r">Red</param>
            <param name="g">Green</param>
            <param name="b">Blue</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.BlinkM.FadeColor(System.Int32)">
            <summary>
            Fade to RGB Color
            </summary>
            <param name="Color">The color (0xff0000 is Red)</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.BlinkM._SplitColor(System.Int32)">
            <summary>
            Splits a color as integer to three bytes
            </summary>
            <param name="Color">The color (0xff0000 is Red)</param>
            <returns>A byte with array 3 values; red, green and blue</returns>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.BlinkM.SendCommand(System.Char,System.Byte[])">
            <summary>
            Sends a raw command
            </summary>
            <param name="Command">The command to send</param>
            <param name="Arguments">Arguments belonging to the command</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.BlinkM.SendCommand(System.Char)">
            <summary>
            Sends a raw command
            </summary>
            <param name="Command">The command to send</param>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.DS1307">
            <summary>
            DS1307 RTC Module
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.DS1307._Device">
            <summary>
            Reference to the I²C bus
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.DS1307.#ctor(System.Byte,System.Int32)">
            <summary>
            Initialises a new DS1307 RTC Module
            </summary>
            <param name="Address">The I²C address</param>
            <param name="ClockRateKhz">The module speed in Khz</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.DS1307.SetTime(System.DateTime)">
            <summary>
            Sets the time in the RTC module
            </summary>
            <param name="Time">The current time</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.DS1307.SetTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the time in the RTC module
            </summary>
            <param name="Year">Current year</param>
            <param name="Month">Current month</param>
            <param name="Day">Current day</param>
            <param name="Hour">Current hour</param>
            <param name="Minute">Current minute</param>
            <param name="Second">Current second</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.DS1307.GetTime">
            <summary>
            Gets the time from the RTC module
            </summary>
            <returns>The current time</returns>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.DS1307.Synchronize">
            <summary>
            Synchronizes the MCU with the RTC module
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.Hd44780Lcd">
            <summary>
            HD44780 Compatible dot matrix LCD
            </summary>
            <remarks>
            I found reading the datasheet a bit complex. It's a big document with a lot of info.
            For this reason, I added comments referring to pages of the datasheet.
            I used the datasheet from http://lcd-linux.sourceforge.net/pdfdocs/hd44780.pdf
            </remarks>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Hd44780Lcd._PinDisposalRequired">
            <summary>True when we use a Cpu.Pin constructor</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Hd44780Lcd._PinMode">
            <summary>When true, we use pin mode</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Hd44780Lcd._Data">
            <summary>Reference to the data block</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Hd44780Lcd._Db4Pin">
            <summary>Reference to the 4th data pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Hd44780Lcd._Db5Pin">
            <summary>Reference to the 5th data pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Hd44780Lcd._Db6Pin">
            <summary>Reference to the 6th data pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Hd44780Lcd._Db7Pin">
            <summary>Reference to the 7th data pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Hd44780Lcd._CePin">
            <summary>Reference to the clock enable pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Hd44780Lcd._RsPin">
            <summary>Reference to the register select pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Hd44780Lcd._RwPin">
            <summary>Reference to the read/write pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Hd44780Lcd._FunctionSetN">
            <summary>Display lines (false = 1, true = 2)</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Hd44780Lcd._FunctionSetF">
            <summary>Character font (false = 5x8, true = 5x10)</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Hd44780Lcd.#ctor(Toolbox.NETMF.Hardware.IParallelOut,Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,System.Int32,System.Int32)">
            <summary>
            Initializes a HD44780 compatible LCD with a parallel output port
            </summary>
            <param name="Data">Data port</param>
            <param name="ClockEnablePin">Clock enable pin</param>
            <param name="RegisterSelectPin">Register select pin</param>
            <param name="ReadWritePin">Read/write pin (optional; this driver is always in 'write' mode)</param>
            <param name="Columns">The amount of columns (default: 16)</param>
            <param name="Rows">The amount of rows (default: 2)</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Hd44780Lcd.#ctor(Toolbox.NETMF.Hardware.IParallelOut,Toolbox.NETMF.Hardware.IGPOPort,Toolbox.NETMF.Hardware.IGPOPort,Toolbox.NETMF.Hardware.IGPOPort,System.Int32,System.Int32)">
            <summary>
            Initializes a HD44780 compatible LCD with a parallel output port
            </summary>
            <param name="Data">Data port</param>
            <param name="ClockEnablePin">Clock enable pin</param>
            <param name="RegisterSelectPin">Register select pin</param>
            <param name="ReadWritePin">Read/write pin (optional; this driver is always in 'write' mode)</param>
            <param name="Columns">The amount of columns (default: 16)</param>
            <param name="Rows">The amount of rows (default: 2)</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Hd44780Lcd.#ctor(Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,System.Int32,System.Int32)">
            <summary>
            Initializes a HD44780 compatible LCD by bitbanging
            </summary>
            <param name="Data4">Data pin 4</param>
            <param name="Data5">Data pin 5</param>
            <param name="Data6">Data pin 6</param>
            <param name="Data7">Data pin 7</param>
            <param name="ClockEnablePin">Clock enable pin</param>
            <param name="RegisterSelectPin">Register select pin</param>
            <param name="ReadWritePin">Read/write pin (optional; this driver is always in 'write' mode)</param>
            <param name="Columns">The amount of columns (default: 16)</param>
            <param name="Rows">The amount of rows (default: 2)</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Hd44780Lcd.#ctor(Toolbox.NETMF.Hardware.IGPOPort,Toolbox.NETMF.Hardware.IGPOPort,Toolbox.NETMF.Hardware.IGPOPort,Toolbox.NETMF.Hardware.IGPOPort,Toolbox.NETMF.Hardware.IGPOPort,Toolbox.NETMF.Hardware.IGPOPort,Toolbox.NETMF.Hardware.IGPOPort,System.Int32,System.Int32)">
            <summary>
            Initializes a HD44780 compatible LCD by bitbanging
            </summary>
            <param name="Data4">Data pin 4</param>
            <param name="Data5">Data pin 5</param>
            <param name="Data6">Data pin 6</param>
            <param name="Data7">Data pin 7</param>
            <param name="ClockEnablePin">Clock enable pin</param>
            <param name="RegisterSelectPin">Register select pin</param>
            <param name="ReadWritePin">Read/write pin (optional; this driver is always in 'write' mode)</param>
            <param name="Columns">The amount of columns (default: 16)</param>
            <param name="Rows">The amount of rows (default: 2)</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Hd44780Lcd.Dispose">
            <summary>
            Disposes this object, freeing all pins
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Hd44780Lcd._Initialization">
            <summary>
            Initializes the display
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Hd44780Lcd.Write(System.Byte,System.Boolean)">
            <summary>Sends data to the display</summary>
            <param name="Data">The data to send</param>
            <param name="CommandMode">When true, the data will be interpreted as a command</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Hd44780Lcd.Write(System.String,System.Boolean)">
            <summary>Sends data to the display</summary>
            <param name="Data">The data to send</param>
            <param name="CommandMode">When true, the data will be interpreted as a command</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Hd44780Lcd.Write(System.Byte[],System.Boolean)">
            <summary>Sends data to the display</summary>
            <param name="Data">The data to send</param>
            <param name="CommandMode">When true, the data will be interpreted as a command</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Hd44780Lcd._Write4Bits(System.Byte)">
            <summary>
            Writes four bits to the LCD interface
            </summary>
            <param name="Byte">The byte to send (only the last 4 bits will be used)</param>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Hd44780Lcd._DisplayControlD">
            <summary>Entire display on/off</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Hd44780Lcd._DisplayControlC">
            <summary>Cursor on/off</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Hd44780Lcd._DisplayControlB">
            <summary>Blinking of cursor position character on/off</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Hd44780Lcd._UpdateDisplayControl">
            <summary>
            Updates the display control bits
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Hd44780Lcd.ClearDisplay">
            <summary>
            Clears the entire display
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Hd44780Lcd.ChangePosition(System.Byte,System.Byte)">
            <summary>
            Changes the cursor location
            </summary>
            <param name="Row">Row</param>
            <param name="Column">Column</param>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.Hd44780Lcd.Columns">
            <summary>The amount of columns on the display</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.Hd44780Lcd.Rows">
            <summary>The amount of rows on the display</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.Hd44780Lcd.Characters">
            <summary>The amount of characters on the display</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.Hd44780Lcd.ShowCursor">
            <summary>When true, a cursor will be shown on the display</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.Hd44780Lcd.BlinkPosition">
            <summary>When true, the cursor position character will blink</summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.IADCPort">
            <summary>
            Generic ADC Port interface
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.IADCPort.AnalogRead">
            <summary>Reads out a value between 0 and 1</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.IADCPort.Dispose">
            <summary>Disposes the ADC port</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.IADCPort.RangeRead">
            <summary>
            Reads the value between <see cref="P:Toolbox.NETMF.Hardware.IADCPort.RangeMin"/> and  <see cref="P:Toolbox.NETMF.Hardware.IADCPort.RangeMax"/>
            </summary>
            <returns>The value within range</returns>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.IADCPort.RangeSet(System.Int32,System.Int32)">
            <summary>Sets the range for <see cref="M:Toolbox.NETMF.Hardware.IADCPort.RangeRead"/></summary>
            <param name="Min">Minimal value</param>
            <param name="Max">Maximal value</param>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.IADCPort.RangeMin">
            <summary>Gets the range minimum</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.IADCPort.RangeMax">
            <summary>Gets the range maximum</summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.Ic74hc165">
            <summary>
            A chain of one or multiple parallel to serial ICs over managed SPI
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74hc165._SpiInterface">
            <summary>A reference to the SPI Interface</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74hc165._Data">
            <summary>Contains all pin values</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74hc165._BitBangMode">
            <summary>When using bitbang mode, this bool is true. <see cref="F:Toolbox.NETMF.Hardware.Ic74hc165._SpiInterface"/> won't be used if this is true.</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74hc165._BBM_SPCK">
            <summary>When using bitbang mode, this will contain a reference to the SPCK pin. See also <see cref="F:Toolbox.NETMF.Hardware.Ic74hc165._BitBangMode"/></summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74hc165._BBM_CS">
            <summary>When using bitbang mode, this will contain a reference to the CS pin. See also <see cref="F:Toolbox.NETMF.Hardware.Ic74hc165._BitBangMode"/></summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74hc165._BBM_MISO">
            <summary>When using bitbang mode, this will contain a reference to the MISO pin. See also <see cref="F:Toolbox.NETMF.Hardware.Ic74hc165._BitBangMode"/></summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74hc165._PinDisposalRequired">
            <summary>Set to true when bitbang pins are created by the constructor</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74hc165.#ctor(Microsoft.SPOT.Hardware.SPI.SPI_module,Microsoft.SPOT.Hardware.Cpu.Pin,System.UInt32,System.UInt32)">
            <summary>
            Initialises a chain of one or multiple parallel to serial ICs over managed SPI
            </summary>
            <param name="SPI_Module">The SPI interface it's connected to</param>
            <param name="LatchPin">The slave select pin connected to the IC(s)</param>
            <param name="Bytes">The amount of 8-bit IC(s) connected</param>
            <param name="SpeedKHz">The max. SPI speed</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74hc165.#ctor(Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,System.UInt32)">
            <summary>
            Initialises a chain of one or multiple parallel to serial ICs over bitbanged SPI [WHEN POSSIBLE, USE MANAGED MODE!]
            </summary>
            <remarks>
            Use only when the managed SPI-pins can't be used. This method is way slower and locks the pins for any other purpose until disposed.
            </remarks>
            <param name="ClockPin">The clock pin connected to the IC(s)</param>
            <param name="DataPin">The data pin connected to the IC(s)</param>
            <param name="LatchPin">The slave select pin connected to the IC(s)</param>
            <param name="Bytes">The amount of 8-bit IC(s) connected</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74hc165._Init(System.UInt32)">
            <summary>
            Initialises all bits and bytes
            </summary>
            <param name="Bytes">The amount of 8-bit IC(s) connected</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74hc165.Dispose">
            <summary>
            Disposes this object, frees all locked items
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74hc165.EnableInterrupts">
            <summary>
            Enables interrupt scanning
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74hc165.DisableInterrupts">
            <summary>
            Disables interrupt scanning
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74hc165._IRQEnabled">
            <summary>True when the interrupt loop is active</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74hc165._IRQStarter">
            <summary>
            Contains a reference to the interrupt thread
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74hc165._IRQThread">
            <summary>
            The interrupt thread itself
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74hc165._ReadSPI">
            <summary>
            Reads all data from the SPI interface
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74hc165.Read(System.UInt32)">
            <summary>
            Reads a single bit
            </summary>
            <param name="Bit">The bit to read</param>
            <returns>The current state of the bit</returns>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74hc165.Pins">
            <summary>Reference to all pins</summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.Ic74hc165.Ic74hc165IRQPort">
            <summary>IRQ Port wrapper for the SPIShifterIn class</summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.IIRQPort">
            <summary>Interrupt ReQuest Port interface</summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.IGPIPort">
            <summary>Generic Purpose Input Port interface</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.IGPIPort.Read">
            <summary>Reads the pin value</summary>
            <returns>True when high, false when low</returns>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.IGPIPort.InvertReadings">
            <summary>When true, the read value is inverted (useful when working with pull-up resistors)</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.IIRQPort.ID">
            <summary>Use this to give this IRQ port a unique identifier (default: blank)</summary>
        </member>
        <member name="E:Toolbox.NETMF.Hardware.IIRQPort.OnStateChange">
            <summary>Event triggered when a IRQ port state changes</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74hc165.Ic74hc165IRQPort._Chain">
            <summary>Reference to the main chain</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74hc165.Ic74hc165IRQPort._BitNo">
            <summary>The number of the bit</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74hc165.Ic74hc165IRQPort._LastValue">
            <summary>Contains the last value, used for the OnStateChange event</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74hc165.Ic74hc165IRQPort.Dispose">
            <summary>Frees the pin</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74hc165.Ic74hc165IRQPort.#ctor(Toolbox.NETMF.Hardware.Ic74hc165,System.UInt32)">
            <summary>
            Defines a GPO Port
            </summary>
            <param name="MainChain">The object of the main chain</param>
            <param name="BitNo">The number of the bit</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74hc165.Ic74hc165IRQPort.Read">
            <summary>Reads the pin value</summary>
            <returns>True when high, false when low</returns>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.Ic74hc165.Ic74hc165IRQPort.InvertReadings">
            <summary>When true, the read value is inverted (useful when working with pull-up resistors)</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.Ic74hc165.Ic74hc165IRQPort.ID">
            <summary>Use this to give this IRQ port a unique identifier (default: blank)</summary>
        </member>
        <member name="E:Toolbox.NETMF.Hardware.Ic74hc165.Ic74hc165IRQPort.OnStateChange">
            <summary>Event triggered when a IRQ port state changes</summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.Ic74hc595">
            <summary>
            A chain of one or multiple serial to parallel ICs over managed SPI
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74hc595._SpiInterface">
            <summary>A reference to the SPI Interface</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74hc595._Data">
            <summary>Contains all pin values</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74hc595._BitBangMode">
            <summary>When using bitbang mode, this bool is true. <see cref="F:Toolbox.NETMF.Hardware.Ic74hc595._SpiInterface"/> won't be used if this is true.</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74hc595._BBM_SPCK">
            <summary>When using bitbang mode, this will contain a reference to the SPCK pin. See also <see cref="F:Toolbox.NETMF.Hardware.Ic74hc595._BitBangMode"/></summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74hc595._BBM_CS">
            <summary>When using bitbang mode, this will contain a reference to the CS pin. See also <see cref="F:Toolbox.NETMF.Hardware.Ic74hc595._BitBangMode"/></summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74hc595._BBM_MOSI">
            <summary>When using bitbang mode, this will contain a reference to the MOSI pin. See also <see cref="F:Toolbox.NETMF.Hardware.Ic74hc595._BitBangMode"/></summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74hc595._PinDisposalRequired">
            <summary>Set to true when bitbang pins are created by the constructor</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74hc595.#ctor(Microsoft.SPOT.Hardware.SPI.SPI_module,Microsoft.SPOT.Hardware.Cpu.Pin,System.UInt32,System.UInt32)">
            <summary>
            Initialises a chain of one or multiple serial to parallel ICs over managed SPI
            </summary>
            <param name="SPI_Module">The SPI interface it's connected to</param>
            <param name="LatchPin">The slave select pin connected to the IC(s)</param>
            <param name="Bytes">The amount of 8-bit IC(s) connected</param>
            <param name="SpeedKHz">The max. SPI speed</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74hc595.#ctor(Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,System.UInt32)">
            <summary>
            Initialises a chain of one or multiple serial to parallel ICs over bitbanged SPI [WHEN POSSIBLE, USE MANAGED MODE!]
            </summary>
            <remarks>
            Use only when the managed SPI-pins can't be used. This method is way slower and locks the pins for any other purpose until disposed.
            </remarks>
            <param name="ClockPin">The clock pin connected to the IC(s)</param>
            <param name="DataPin">The data pin connected to the IC(s)</param>
            <param name="LatchPin">The slave select pin connected to the IC(s)</param>
            <param name="Bytes">The amount of 8-bit IC(s) connected</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74hc595.Dispose">
            <summary>
            Disposes this object, frees all locked items
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74hc595._Init(System.UInt32)">
            <summary>
            Initialises all bits and bytes
            </summary>
            <param name="Bytes">The amount of 8-bit IC(s) connected</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74hc595._WriteSPI">
            <summary>
            Pushes all data to the SPI bus
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74hc595.Write(System.UInt32,System.Boolean)">
            <summary>
            Writes a single bit
            </summary>
            <param name="Bit">The bit to write</param>
            <param name="State">The new state for the bit</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74hc595._Write(System.UInt32,System.Boolean)">
            <summary>
            Writes a single bit to the buffer
            </summary>
            <param name="Bit">The bit to write</param>
            <param name="State">The new state for the bit</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74hc595.WriteByte(System.UInt32,System.UInt32,System.Int32,System.Boolean)">
            <summary>
            Writes a byte to the buffer
            </summary>
            <param name="StartBit">The first bit to write</param>
            <param name="Data">The data to write</param>
            <param name="BitCount">The amount of bits to write</param>
            <param name="Inverted">When true, bits will be inverted</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74hc595.Read(System.UInt32)">
            <summary>
            Reads a single bit
            </summary>
            <param name="Bit">The bit to read</param>
            <returns>The current state of the bit</returns>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74hc595.Pins">
            <summary>Reference to all pins</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74hc595.CreateParallelOut(System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Creates a new parallel output port on this IC chain
            </summary>
            <param name="StartBit">The first bit to write to</param>
            <param name="BitCount">The amount of bits</param>
            <param name="Inverted">When true, bits will be inverted</param>
            <returns>Parallel output port object</returns>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.Ic74hc595.Ic74hc595GPOPort">
            <summary>GPO Port wrapper for the SPIShifterOut class</summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.IGPOPort">
            <summary>Generic Purpose Output Port interface</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.IGPOPort.Write(System.Boolean)">
            <summary>Writes the pin value</summary>
            <param name="State">True for high, false for low</param>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.IGPOPort.State">
            <summary>True when the pin is high, false when low</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74hc595.Ic74hc595GPOPort._Chain">
            <summary>Reference to the main chain</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74hc595.Ic74hc595GPOPort._BitNo">
            <summary>The number of the bit</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74hc595.Ic74hc595GPOPort.#ctor(Toolbox.NETMF.Hardware.Ic74hc595,System.UInt32)">
            <summary>
            Defines a GPO Port
            </summary>
            <param name="MainChain">The object of the main chain</param>
            <param name="BitNo">The number of the bit</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74hc595.Ic74hc595GPOPort.Write(System.Boolean)">
            <summary>
            Writes the pin value
            </summary>
            <param name="State">True for high, false for low</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74hc595.Ic74hc595GPOPort.Dispose">
            <summary>
            Frees the pin
            </summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.Ic74hc595.Ic74hc595GPOPort.State">
            <summary>True when the pin is high, false when low</summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.Ic74hc595.Ic74hc595ParallelOut">
            <summary>
            Parallel Out class
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.IParallelOut">
            <summary>Generic Purpose Output Array interface</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.IParallelOut.Write(System.UInt32)">
            <summary>Writes a block of data to the array</summary>
            <param name="Value">The block of data to write</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.IParallelOut.Read">
            <summary>Returns the last written block of data</summary>
            <returns>The last written block of data</returns>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.IParallelOut.Size">
            <summary>Amount of bits in the array</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74hc595.Ic74hc595ParallelOut._Chain">
            <summary>Reference to the main chain</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74hc595.Ic74hc595ParallelOut._StartBit">
            <summary>The bit to start at</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74hc595.Ic74hc595ParallelOut._BitCount">
            <summary>The amount of bits in this chain</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74hc595.Ic74hc595ParallelOut._Buffer">
            <summary>The buffer of the data</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74hc595.Ic74hc595ParallelOut._Inverted">
            <summary>When true, bits will be inverted</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74hc595.Ic74hc595ParallelOut.Dispose">
            <summary>Frees the pin for other usage</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74hc595.Ic74hc595ParallelOut.#ctor(Toolbox.NETMF.Hardware.Ic74hc595,System.UInt32,System.UInt32,System.Boolean)">
            <summary>Initialises a new parallel output port</summary>
            <param name="MainChain">The object of the main chain</param>
            <param name="StartBit">The first bit to write</param>
            <param name="BitCount">The amount of bits to write</param>
            <param name="Inverted">When true, bits will be inverted</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74hc595.Ic74hc595ParallelOut.Read">
            <summary>Returns the last written block of data</summary>
            <returns>The last written block of data</returns>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74hc595.Ic74hc595ParallelOut.Write(System.UInt32)">
            <summary>Writes a block of data to the array</summary>
            <param name="Value">The block of data to write</param>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.Ic74hc595.Ic74hc595ParallelOut.Size">
            <summary>Amount of bits in the array</summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.StateChange">
            <summary>Triggered when a IRQ port state changes</summary>
            <param name="Object">The IRQ port (use IIRQPort.ID to make it unique)</param>
            <param name="State">The new state</param>
            <param name="Time">Timestamp of the event</param>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.IntegratedGPI">
            <summary>.NETMF InputPort wrapper</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.IntegratedGPI._Port">
            <summary>Reference to the GPI port</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.IntegratedGPI.#ctor(Microsoft.SPOT.Hardware.Cpu.Pin,System.Boolean,Microsoft.SPOT.Hardware.Port.ResistorMode)">
            <summary>
            Creates a new GPI Port
            </summary>
            <param name="Pin">The pin number</param>
            <param name="GlitchFilter">Turns on or off the glitchfilter</param>
            <param name="ResistorMode">Selects the resistor mode</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.IntegratedGPI.Read">
            <summary>Reads the pin value</summary>
            <returns>True when high, false when low</returns>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.IntegratedGPI.Dispose">
            <summary>
            Disposes this object
            </summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.IntegratedGPI.InvertReadings">
            <summary>When true, the read value is inverted (useful when working with pull-up resistors)</summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.IntegratedGPO">
            <summary>.NETMF OutputPort wrapper</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.IntegratedGPO._Port">
            <summary>Reference to the GPO port</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.IntegratedGPO.#ctor(Microsoft.SPOT.Hardware.Cpu.Pin,System.Boolean)">
            <summary>
            Creates a new GPO Port
            </summary>
            <param name="Pin">The pin number</param>
            <param name="InitialState">It's initial state</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.IntegratedGPO.Write(System.Boolean)">
            <summary>Writes the pin value</summary>
            <param name="State">True for high, false for low</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.IntegratedGPO.Dispose">
            <summary>
            Disposes this object
            </summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.IntegratedGPO.State">
            <summary>True when the pin is high, false when low</summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.IntegratedIRQ">
            <summary>.NETMF InterruptPort wrapper</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.IntegratedIRQ._Port">
            <summary>Reference to the IRQ port</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.IntegratedIRQ.#ctor(Microsoft.SPOT.Hardware.Cpu.Pin,System.Boolean,Microsoft.SPOT.Hardware.Port.ResistorMode)">
            <summary>
            Creates a new IRQ Port
            </summary>
            <param name="Pin">The pin number</param>
            <param name="GlitchFilter">Turns on or off the glitchfilter</param>
            <param name="ResistorMode">Selects the resistor mode</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.IntegratedIRQ._Port_OnInterrupt(System.UInt32,System.UInt32,System.DateTime)">
            <summary>
            Triggered when the pin state changes
            </summary>
            <param name="PinId">The hardware pin #</param>
            <param name="Value">The new value</param>
            <param name="Time">Time of the event</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.IntegratedIRQ.Read">
            <summary>Reads the pin value</summary>
            <returns>True when high, false when low</returns>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.IntegratedIRQ.Dispose">
            <summary>
            Disposes this object
            </summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.IntegratedIRQ.InvertReadings">
            <summary>When true, the read value is inverted (useful when working with pull-up resistors)</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.IntegratedIRQ.ID">
            <summary>Use this to give this IRQ port a unique identifier (default: blank)</summary>
        </member>
        <member name="E:Toolbox.NETMF.Hardware.IntegratedIRQ.OnStateChange">
            <summary>Event triggered when a IRQ port state changes</summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.IPWMPort">
            <summary>
            Generic PWM Port interface
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.IPWMPort.StartPulse">
            <summary>Starts the signal</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.IPWMPort.StopPulse">
            <summary>Stops the signal</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.IPWMPort.Dispose">
            <summary>Disposes the PWM port</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.IPWMPort.SetPulse(System.UInt32,System.UInt32)">
            <summary>Sets the signal in pulses</summary>
            <param name="period_ns">The time for each timeframe in nanoseconds</param>
            <param name="duration_ns">The amount of nanoseconds the pulse must be high</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.IPWMPort.SetDutyCycle(System.UInt32,System.UInt32)">
            <summary>Sets the signal as dutycycle</summary>
            <param name="dutyCycle">The amount of changes per second</param>
            <param name="frequency">The PWM frequency</param>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.IPWMPort.Active">
            <summary>Checks if the signal is active</summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.ITRIPort">
            <summary>Tristate Port interface</summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.Lpd8806Chain">
            <summary>
            A chain of LPD8806-driven RGB LEDs
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Lpd8806Chain._Conn">
            <summary>
            Reference to the SPI connection
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Lpd8806Chain._Buffer">
            <summary>
            The SPI write buffer
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Lpd8806Chain.#ctor(System.Int32,Microsoft.SPOT.Hardware.SPI.SPI_module)">
            <summary>
            Defines a chain of LPD8806-driven RGB LEDs
            </summary>
            <param name="LedCount">The amount of LEDs in the chain (2 per IC)</param>
            <param name="SPI_Device">The SPI bus the chain is connected to</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Lpd8806Chain.#ctor(System.Int32,Microsoft.SPOT.Hardware.SPI.SPI_module,Microsoft.SPOT.Hardware.Cpu.Pin,System.Boolean)">
            <summary>
            Defines a chain of LPD8806-driven RGB LEDs
            </summary>
            <param name="LedCount">The amount of LEDs in the chain (2 per IC)</param>
            <param name="SPI_Device">The SPI bus the chain is connected to</param>
            <param name="ChipSelect_Port">If there's a CS circuitry, specify it's pin</param>
            <param name="ChipSelect_ActiveState">If there's a CS circuitry, specify it's active state</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Lpd8806Chain.ShiftToRight(System.Byte,System.Byte,System.Byte,System.Boolean)">
            <summary>
            Shifts all LEDs to the right and adds a new one at the left
            </summary>
            <param name="Red">Red brightness (0 to 255)</param>
            <param name="Green">Green brightness (0 to 255)</param>
            <param name="Blue">Blue brightness (0 to 255)</param>
            <param name="Write">Do we have to write all LEDs immediately?</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Lpd8806Chain.ShiftToRight(System.Int32,System.Boolean)">
            <summary>
            Shifts all LEDs to the right and adds a new one at the left
            </summary>
            <param name="Color">The color (0x000000 to 0xffffff)</param>
            <param name="Write">Do we have to write all LEDs immediately?</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Lpd8806Chain.ShiftToLeft(System.Byte,System.Byte,System.Byte,System.Boolean)">
            <summary>
            Shifts all LEDs to the left and adds a new one at the right
            </summary>
            <param name="Red">Red brightness (0 to 255)</param>
            <param name="Green">Green brightness (0 to 255)</param>
            <param name="Blue">Blue brightness (0 to 255)</param>
            <param name="Write">Do we have to write all LEDs immediately?</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Lpd8806Chain.ShiftToLeft(System.Int32,System.Boolean)">
            <summary>
            Shifts all LEDs to the left and adds a new one at the right
            </summary>
            <param name="Color">The color (0x000000 to 0xffffff)</param>
            <param name="Write">Do we have to write all LEDs immediately?</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Lpd8806Chain.ConfigureAll(System.Byte,System.Byte,System.Byte,System.Boolean)">
            <summary>
            Configures all LEDs to a specific color
            </summary>
            <param name="Red">Red brightness (0 to 255)</param>
            <param name="Green">Green brightness (0 to 255)</param>
            <param name="Blue">Blue brightness (0 to 255)</param>
            <param name="Write">Do we have to write all LEDs immediately?</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Lpd8806Chain.ConfigureAll(System.Int32,System.Boolean)">
            <summary>
            Configures all LEDs to a specific color
            </summary>
            <param name="Color">The color (0x000000 to 0xffffff)</param>
            <param name="Write">Do we have to write all LEDs immediately?</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Lpd8806Chain.Configure(System.Int32,System.Byte,System.Byte,System.Byte,System.Boolean)">
            <summary>
            Configures a specific LED
            </summary>
            <param name="LedNo">The LED to configure (starts counting at 0)</param>
            <param name="Red">Red brightness (0 to 255)</param>
            <param name="Green">Green brightness (0 to 255)</param>
            <param name="Blue">Blue brightness (0 to 255)</param>
            <param name="Write">Do we have to write all LEDs immediately?</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Lpd8806Chain.Configure(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Configures a specific LED
            </summary>
            <param name="LedNo">The LED to configure (starts counting at 0)</param>
            <param name="Color">The color (0x000000 to 0xffffff)</param>
            <param name="Write">Do we have to write all LEDs immediately?</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Lpd8806Chain.Write">
            <summary>
            Writes the status of all LEDs
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Lpd8806Chain._HexToRgb(System.Int32)">
            <summary>
            Converts an integer color code to RGB
            </summary>
            <param name="HexColor">The integer hex color (0x000000 to 0xffffff)</param>
            <returns>A new byte[] { Red, Green, Blue }</returns>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.Lpd8806Chain.LedCount">
            <summary>
            Amount of LEDs
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.MatrixKeyPad">
            <summary>Generic KeyPad driver</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MatrixKeyPad._ColPins">
            <summary>A collection of all column pins</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MatrixKeyPad._RowPins">
            <summary>A collection of all row pins</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MatrixKeyPad._ColPinIds">
            <summary>A collection of all column pin IDs</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MatrixKeyPad._CheckState">
            <summary>Contains the current state</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MatrixKeyPad._LastKeyPress">
            <summary>Stores the last key press</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MatrixKeyPad.#ctor(Microsoft.SPOT.Hardware.Cpu.Pin[],Microsoft.SPOT.Hardware.Cpu.Pin[])">
            <summary>Generic KeyPad driver</summary>
            <param name="RowPins">The pins bound to rows on the keypad matrix</param>
            <param name="ColPins">The pins bound to columns on the keypad matrix</param>
            <remarks>See also: http://netmftoolbox.codeplex.com/wikipage?title=Toolbox.NETMF.Hardware.MatrixKeyPad </remarks>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MatrixKeyPad.MatrixKeyPad_OnInterrupt(System.UInt32,System.UInt32,System.DateTime)">
            <summary>
            Event triggered when a button is pressed or released
            </summary>
            <param name="ColPinId">The Column Pin in which a key is pressed</param>
            <param name="State">The state of the button (0 = pressed, 1 = released)</param>
            <param name="time">Time of the event</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MatrixKeyPad.ActivateRowPorts(System.Boolean)">
            <summary>Switches all Row ports activity</summary>
            <param name="Active">True when they must be active, false otherwise</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MatrixKeyPad.ActivateColInterrupts(System.Boolean)">
            <summary>Disables or enables all interrupt events</summary>
            <param name="Active">When true, all events will be enabled, oftherwise disabled</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MatrixKeyPad.Read">
            <summary>Reads the KeyPad and returns the currently pressed scan code</summary>
            <returns>The key code or -1 when nothing is pressed</returns>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MatrixKeyPad.Dispose">
            <summary>
            Disposes this object and frees the pins
            </summary>
        </member>
        <member name="E:Toolbox.NETMF.Hardware.MatrixKeyPad.OnKeyDown">
            <summary>When a button is pushed, this event will be triggered</summary>
        </member>
        <member name="E:Toolbox.NETMF.Hardware.MatrixKeyPad.OnKeyUp">
            <summary>When a button is released, this event will be triggered</summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.MatrixKeyPad.CheckStates">
            <summary>We have a few states in which we do different checks</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MatrixKeyPad.CheckStates.WaitingForSignal">
            <summary>Waiting for a key press</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MatrixKeyPad.CheckStates.RowCheck">
            <summary>Searching the row</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MatrixKeyPad.CheckStates.WaitingForRelease">
            <summary>Waiting for a key release</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MatrixKeyPad.CheckStates.WaitingForMultipleRelease">
            <summary>Multiple buttons are pressed, waiting for a release</summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.Mcp23017">
            <summary>
            MCP23017 pin expander
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Mcp23017._Device">
            <summary>
            Reference to the I²C bus
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Mcp23017.#ctor(System.UInt16,System.Int32)">
            <summary>
            Initialises a new MCP23017 pin expander
            </summary>
            <param name="Address">The I²C address</param>
            <param name="ClockRateKhz">The module speed in Khz</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Mcp23017.GetPin(System.Int32)">
            <summary>
            Reads the state of a pin
            </summary>
            <param name="Pin">The pin (0 to 15)</param>
            <returns>True if it's high, false if it's low</returns>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Mcp23017.EnablePullup(System.Int32,System.Boolean)">
            <summary>
            Enables pull-ups
            </summary>
            <param name="Pin">The pin (0 to 15)</param>
            <param name="PullHigh">True if the pin must be pulled high, false if it must not be</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Mcp23017.SetPin(System.Int32,System.Boolean)">
            <summary>
            Sets the state of an output port
            </summary>
            <param name="Pin">The pin (0 to 15)</param>
            <param name="Value">True for high, false for low</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Mcp23017.WriteByte(System.UInt32,System.UInt32,System.Int32,System.Boolean)">
            <summary>
            Sets the state of multiple output ports
            </summary>
            <param name="StartBit">The first bit to write</param>
            <param name="Data">The data to write</param>
            <param name="BitCount">The amount of bits to write</param>
            <param name="Inverted">When true, bits will be inverted</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Mcp23017.PinMode(System.Int32,System.Boolean)">
            <summary>
            Changes the mode of a pin
            </summary>
            <param name="Pin">The pin (0 to 15)</param>
            <param name="Output">True for output port, false for input port</param>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Mcp23017.Pins">
            <summary>Reference to all pins</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Mcp23017.CreateParallelOut(System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Creates a new parallel output port on this IC chain
            </summary>
            <param name="StartBit">The first bit to write to</param>
            <param name="BitCount">The amount of bits</param>
            <param name="Inverted">When true, bits will be inverted</param>
            <returns>Parallel output port object</returns>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.Mcp23017.Mcp23017Port">
            <summary>IRQ Port wrapper for the SPIShifterIn class</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Mcp23017.Mcp23017Port._Module">
            <summary>Reference to the main chip</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Mcp23017.Mcp23017Port._PinNo">
            <summary>The number of the pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Mcp23017.Mcp23017Port._IsOutput">
            <summary>True when this is an outputport</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Mcp23017.Mcp23017Port.#ctor(Toolbox.NETMF.Hardware.Mcp23017,System.Int32)">
            <summary>
            Defines a Tristate Port
            </summary>
            <param name="Module">The object of the main chip</param>
            <param name="PinNo">The number of the pin</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Mcp23017.Mcp23017Port.Write(System.Boolean)">
            <summary>Writes the pin value</summary>
            <param name="State">True for high, false for low</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Mcp23017.Mcp23017Port.Read">
            <summary>Reads the pin value</summary>
            <returns>True when high, false when low</returns>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Mcp23017.Mcp23017Port.Dispose">
            <summary>Frees the pin</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.Mcp23017.Mcp23017Port.State">
            <summary>True when the pin is high, false when low</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.Mcp23017.Mcp23017Port.InvertReadings">
            <summary>When true, the read value is inverted (useful when working with pull-up resistors)</summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.Mcp23017.Mcp23017ParallelOut">
            <summary>
            Parallel Out class
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Mcp23017.Mcp23017ParallelOut._Module">
            <summary>Reference to the main chain</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Mcp23017.Mcp23017ParallelOut._StartBit">
            <summary>The bit to start at</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Mcp23017.Mcp23017ParallelOut._BitCount">
            <summary>The amount of bits in this chain</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Mcp23017.Mcp23017ParallelOut._Buffer">
            <summary>The buffer of the data</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Mcp23017.Mcp23017ParallelOut._Inverted">
            <summary>When true, bits will be inverted</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Mcp23017.Mcp23017ParallelOut.Dispose">
            <summary>Frees the pin for other usage</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Mcp23017.Mcp23017ParallelOut.#ctor(Toolbox.NETMF.Hardware.Mcp23017,System.UInt32,System.UInt32,System.Boolean)">
            <summary>Initialises a new parallel output port</summary>
            <param name="Module">The object of the main chain</param>
            <param name="StartBit">The first bit to write</param>
            <param name="BitCount">The amount of bits to write</param>
            <param name="Inverted">When true, bits will be inverted</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Mcp23017.Mcp23017ParallelOut.Read">
            <summary>Returns the last written block of data</summary>
            <returns>The last written block of data</returns>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Mcp23017.Mcp23017ParallelOut.Write(System.UInt32)">
            <summary>Writes a block of data to the array</summary>
            <param name="Value">The block of data to write</param>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.Mcp23017.Mcp23017ParallelOut.Size">
            <summary>Amount of bits in the array</summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.MicroSerialServoController">
            <summary>
            Pololu Micro Serial Servo Controller
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MicroSerialServoController._Controller">
            <summary>
            Reference to the serial port
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MicroSerialServoController._Mode">
            <summary>
            Contains the current used mode
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MicroSerialServoController.#ctor(System.String,Toolbox.NETMF.Hardware.MicroSerialServoController.Modes)">
            <summary>
            Pololu Micro Serial Servo Controller
            </summary>
            <param name="Port">Serial port the controller is connected to</param>
            <param name="Mode">The mode the controller is in (when the Mode-jumper is placed on the board, it's MiniSSC2)</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MicroSerialServoController.SetParameters(System.Byte,System.Boolean,System.Boolean,System.Byte)">
            <summary>
            Sets specific parameters for a servo (Pololu-mode only)
            </summary>
            <param name="MotorId">The number of the motor</param>
            <param name="On">Specifies whether the motor is on or not</param>
            <param name="Reversed">When true, it will move in reverse</param>
            <param name="Range">The range through which the servo moves (0 to 31)</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MicroSerialServoController.SetSpeed(System.Byte,System.Byte)">
            <summary>
            Sets the speed at which the servo moves (Pololu-mode only)
            </summary>
            <param name="MotorId">The number of the motor</param>
            <param name="Speed">The speed of movement (1 to 127 or 0 to disable any delay)</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MicroSerialServoController.SetPosition(System.Byte,System.Byte)">
            <summary>
            Changes the position of a motor (works in both modes)
            </summary>
            <param name="MotorId">The number of the motor</param>
            <param name="Position">The position the motor must go to (0 to 254)</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MicroSerialServoController.SendCommand(System.Byte,System.Byte,System.Byte)">
            <summary>
            Sends a customized command (Pololu-mode only, see manual for commands)
            </summary>
            <param name="Command">Command ID</param>
            <param name="MotorId">Motor ID</param>
            <param name="Data1">Data byte 1</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MicroSerialServoController.SendCommand(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sends a customized command (Pololu-mode only, see manual for commands)
            </summary>
            <param name="Command">Command ID</param>
            <param name="MotorId">Motor ID</param>
            <param name="Data1">Data byte 1</param>
            <param name="Data2">Data byte 2</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MicroSerialServoController.SendCommand(System.Byte[])">
            <summary>
            Sends a customized command (Pololu-mode only, see manual for commands)
            </summary>
            <param name="WriteBuffer">A byte array with the command and it's parameters</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MicroSerialServoController.Dispose">
            <summary>
            Disposes this object
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.MicroSerialServoController.Modes">
            <summary>
            Different communication modes of the board
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MicroSerialServoController.Modes.MiniSSC2">
            <summary>MiniSSC2 communication mode (use this when a jumper is on the board)</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MicroSerialServoController.Modes.Pololu">
            <summary>Pololu communication mode (Recommended; use this when no jumper is on the board)</summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.MultiI2C">
            <summary>
            I²C Helper to make it easier to use multiple I²C-devices on one I²C-bus
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MultiI2C._I2CDevice">
            <summary>Reference to the I²C Device. All MultiI2C devices use the same I2CDevice class from the NETMF, so this reference is static</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MultiI2C._Configuration">
            <summary>I²C Configuration. Different for each device, so not a static reference</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MultiI2C.#ctor(System.UInt16,System.Int32)">
            <summary>
            Initializes a new I²C device
            </summary>
            <param name="Address">The address of the I²C device</param>
            <param name="ClockRateKhz">The speed in Khz of the I²C device</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MultiI2C.Write(System.Byte[])">
            <summary>
            The 8-bit bytes to write to the I²C-buffer
            </summary>
            <param name="WriteBuffer">An array of 8-bit bytes</param>
            <returns>The amount of transferred bytes</returns>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MultiI2C.Write(System.UInt16[])">
            <summary>
            The 16-bit bytes to write to the I²C-buffer
            </summary>
            <param name="WriteBuffer">An array of 16-bit bytes</param>
            <returns>The amount of transferred bytes</returns>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MultiI2C.Read(System.Byte[])">
            <summary>
            Reads 8-bit bytes
            </summary>
            <param name="ReadBuffer">An array with 8-bit bytes to read</param>
            <returns>The amount of transferred bytes</returns>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MultiI2C.Read(System.UInt16[])">
            <summary>
            Reads 16-bit bytes
            </summary>
            <param name="ReadBuffer">An array with 16-bit bytes to read</param>
            <returns>The amount of transferred bytes</returns>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MultiI2C.WriteRead(System.Byte[],System.Byte[])">
            <summary>
            Writes an array of 8-bit bytes to the interface, and reads an array of 8-bit bytes from the interface.
            </summary>
            <param name="WriteBuffer">An array with 8-bit bytes to write</param>
            <param name="ReadBuffer">An array with 8-bit bytes to read</param>
            <returns>The amount of transferred bytes</returns>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MultiI2C.WriteRead(System.UInt16[],System.UInt16[])">
            <summary>
            Writes an array of 16-bit bytes to the interface, and reads an array of 16-bit bytes from the interface.
            </summary>
            <param name="WriteBuffer">An array with 16-bit bytes to write</param>
            <param name="ReadBuffer">An array with 16-bit bytes to read</param>
            <returns>The amount of transferred bytes</returns>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.MultiI2C.Timeout">
            <summary>Transaction timeout</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.MultiI2C.DeviceAddress">
            <summary>The address of the I²C device</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.MultiI2C.ClockRateKhz">
            <summary>The speed of the I²C device</summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.MultiSPI">
            <summary>
            SPI Helper to make it easier to use multiple SPI-devices on one SPI-bus
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MultiSPI._SPIDevice">
            <summary>Reference to the SPI Device. All MultiSPI devices use the same SPI class from the NETMF, so this reference is static</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MultiSPI._Configuration">
            <summary>SPI Configuration. Different for each device, so not a static reference</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MultiSPI._Use_SoftwareCS">
            <summary>There is a software ChipSelect feature because of a bug. True when enabled</summary>
            <remarks>see http://netduino.codeplex.com/workitem/3 for more details about the bug.</remarks>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MultiSPI._SoftwareCS">
            <summary>Reference to the latch-pin when using software chip-select</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MultiSPI._SoftwareCS_ActiveState">
            <summary>Active state when using software chip-select</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MultiSPI.#ctor(Microsoft.SPOT.Hardware.SPI.Configuration)">
            <summary>
            Initializes a new SPI device
            </summary>
            <param name="config">The SPI-module configuration</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MultiSPI.Write(System.Byte[])">
            <summary>
            The 8-bit bytes to write to the SPI-buffer
            </summary>
            <param name="WriteBuffer">An array of 8-bit bytes</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MultiSPI.Write(System.UInt16[])">
            <summary>
            The 16-bit bytes to write to the SPI-buffer
            </summary>
            <param name="WriteBuffer">An array of 16-bit bytes</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MultiSPI.Read(System.Byte[])">
            <summary>
            Reads 8-bit bytes
            </summary>
            <param name="ReadBuffer">An array with 8-bit bytes to read</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MultiSPI.Read(System.UInt16[])">
            <summary>
            Reads 16-bit bytes
            </summary>
            <param name="ReadBuffer">An array with 16-bit bytes to read</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MultiSPI.WriteRead(System.Byte[],System.Byte[])">
            <summary>
            Writes an array of 8-bit bytes to the interface, and reads an array of 8-bit bytes from the interface.
            </summary>
            <param name="WriteBuffer">An array with 8-bit bytes to write</param>
            <param name="ReadBuffer">An array with 8-bit bytes to read</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MultiSPI.WriteRead(System.UInt16[],System.UInt16[])">
            <summary>
            Writes an array of 16-bit bytes to the interface, and reads an array of 16-bit bytes from the interface.
            </summary>
            <param name="WriteBuffer">An array with 16-bit bytes to write</param>
            <param name="ReadBuffer">An array with 16-bit bytes to read</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MultiSPI.WriteRead(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Writes an array of 8-bit bytes to the interface, and reads an array of 8-bit bytes from the interface into a specified location in the read buffer.
            </summary>
            <param name="WriteBuffer">An array with 8-bit bytes to write</param>
            <param name="ReadBuffer">An array with 8-bit bytes to read</param>
            <param name="StartReadOffset">The offset in time, measured in transacted elements from writeBuffer, when to start reading back data into readBuffer</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MultiSPI.WriteRead(System.UInt16[],System.UInt16[],System.Int32)">
            <summary>
            Writes an array of 16-bit bytes to the interface, and reads an array of 16-bit bytes from the interface into a specified location in the read buffer.
            </summary>
            <param name="WriteBuffer">An array with 16-bit bytes to write</param>
            <param name="ReadBuffer">An array with 16-bit bytes to read</param>
            <param name="StartReadOffset">The offset in time, measured in transacted elements from writeBuffer, when to start reading back data into readBuffer</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MultiSPI.WriteRead(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes an array of 16-bit bytes to the interface, and reads an array of 16-bit bytes from the interface into a specified location in the read buffer. 
            </summary>
            <param name="WriteBuffer">An array with 8-bit bytes to write</param>
            <param name="ReadBuffer">An array with 8-bit bytes to read</param>
            <param name="WriteOffset">The offset in writeBuffer to start write data from</param>
            <param name="WriteCount">The number of elements in writeBuffer to write</param>
            <param name="ReadOffset">The offset in readBuffer to start read data from</param>
            <param name="ReadCount">The number of elements in readBuffer to fill</param>
            <param name="StartReadOffset">The offset in time, measured in transacted elements from writeBuffer, when to start reading back data into readBuffer</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MultiSPI.WriteRead(System.UInt16[],System.Int32,System.Int32,System.UInt16[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes an array of 16-bit bytes to the interface, and reads an array of 16-bit bytes from the interface into a specified location in the read buffer. 
            </summary>
            <param name="WriteBuffer">An array with 16-bit bytes to write</param>
            <param name="ReadBuffer">An array with 16-bit bytes to read</param>
            <param name="WriteOffset">The offset in writeBuffer to start write data from</param>
            <param name="WriteCount">The number of elements in writeBuffer to write</param>
            <param name="ReadOffset">The offset in readBuffer to start read data from</param>
            <param name="ReadCount">The number of elements in readBuffer to fill</param>
            <param name="StartReadOffset">The offset in time, measured in transacted elements from writeBuffer, when to start reading back data into readBuffer</param>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.NmeaGps">
            <summary>
            NMEA compatible GPS
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.NmeaGps._Uart">
            <summary>
            Reference to the serial port
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.NmeaGps._Buffer">
            <summary>
            Contains the serial buffer
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.NmeaGps.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new GPS module
            </summary>
            <param name="SerialPort">The serial port the module is connected to</param>
            <param name="BaudRate">The speed of the module</param>
            <remarks>Specs are taken from http://www.gpsinformation.org/dale/nmea.htm </remarks>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.NmeaGps.Start">
            <summary>
            Starts listening to the GPS module
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.NmeaGps.Stop">
            <summary>
            Stops listening to the GPS module
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.NmeaGps._Fix">
            <summary>True when we have a fix</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.NmeaGps._Hour">
            <summary>Latest fix timestamp: Hour</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.NmeaGps._Minute">
            <summary>Latest fix timestamp: Minute</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.NmeaGps._Second">
            <summary>Latest fix timestamp: Second</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.NmeaGps._MilliSecond">
            <summary>Latest fix timestamp: MilliSecond</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.NmeaGps._Day">
            <summary>Latest fix timestamp: Day</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.NmeaGps._Month">
            <summary>Latest fix timestamp: Month</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.NmeaGps._Year">
            <summary>Latest fix timestamp: Year</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.NmeaGps._RMC_Supported">
            <summary>True when we got an RMC reply</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.NmeaGps._GGA_Supported">
            <summary>True when we got an GGA reply</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.NmeaGps._LastPosition">
            <summary>Last position as string</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.NmeaGps._IsPositionChanged">
            <summary>Checks if the position is changed. If so, the PositionChanged event it called</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.NmeaGps._GSA_DataReceived(System.String[])">
            <summary>
            Triggered when overall satellite data is received
            </summary>
            <param name="Params">The data</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.NmeaGps._RMC_DataReceived(System.String[])">
            <summary>
            Triggered when recommended minimum data for gps is received
            </summary>
            <param name="Params">The data</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.NmeaGps._GGA_DataReceived(System.String[])">
            <summary>
            Triggered when fix information is received
            </summary>
            <param name="Params">The data</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.NmeaGps._Uart_DataReceived(System.Object,System.IO.Ports.SerialDataReceivedEventArgs)">
            <summary>
            There's data received from the serial port
            </summary>
            <param name="sender">The sender of the data</param>
            <param name="e">Some event data</param>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.NmeaGps.Active">
            <summary>
            Checks if we're listening to the GPS module
            </summary>
        </member>
        <member name="E:Toolbox.NETMF.Hardware.NmeaGps.GotFix">
            <summary>Event triggered when we gain a fix</summary>
        </member>
        <member name="E:Toolbox.NETMF.Hardware.NmeaGps.LostFix">
            <summary>Event triggered when we loose a fix</summary>
        </member>
        <member name="E:Toolbox.NETMF.Hardware.NmeaGps.PositionChanged">
            <summary>Event triggered when our position is changed</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.NmeaGps.Fix">
            <summary>True when we have a fix</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.NmeaGps.Fix3D">
            <summary>True when we have a 3D fix</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.NmeaGps.Satellites">
            <summary>The amount of fixed satellites</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.NmeaGps.GPSTime">
            <summary>Time according to the satellites</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.NmeaGps.Knots">
            <summary>Speed over the ground in knots</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.NmeaGps.Kmh">
            <summary>Speed over the ground in kilometers per hour</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.NmeaGps.TrackAngle">
            <summary>Track angle in degrees</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.NmeaGps.SLatitude">
            <summary>Latidude (in the format 4068.092,N)</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.NmeaGps.SLongitude">
            <summary>Longitude (in the format 04704.045,W)</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.NmeaGps.SAltitude">
            <summary>Altitude, Meters, above mean sea level (in the format 545.4,M)</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.NmeaGps.Longitude">
            <summary>Longitude as floating point value</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.NmeaGps.Latitude">
            <summary>Latitude as floating point value</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.NmeaGps.Altitude">
            <summary>Altitude in meters as floating point value</summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.Rdm630">
             <summary>
             Rdm630 RFID Reader
             </summary>
             <remarks><![CDATA[
             RDM630 pin layout:
             
               10 9  8           7  6
               │  │  │           │  │
             █████████████████████████
             █████████████████████████
             █████████████████████████
             █████████████████████████
               │  │  │  │  │         
               1  2  3  4  5         
            
              1 TX (Data out) -> Netduino pin 0 or 2 (COM1 or COM2)
              2 RX (Data in) -> Netduino pin 1 or 3 (COM1 or COM2), but since it's read-only, may be left empty
              3 Unused
              4 GND -> Netduino Gnd
              5 +5V(DC) -> Netduino +5V
              6 ANT1 -> Antenna (polarity doesn't matter)
              7 ANT2 -> Antenna (polarity doesn't matter)
              8 GND -> Netduino Gnd (but if pin 4 is already connected, this may be left empty)
              9 +5V(DC) -> Netduino +5V (but if pin 5 is already connected, this may be left empty)
             10 LED -> A led if you want to have a led signalling when there's a transfer
             ]]></remarks>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Rdm630._Serial">
            <summary>
            Contains a reference to the serial port the Rdm630 is connected to
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Rdm630._ReadBuffer">
            <summary>
            A read buffer of 14 bytes. Since every block of data has 14 bytes, this should be enough.
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Rdm630._ReadPosition">
            <summary>
            The current position on the _ReadBuffer
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Rdm630._SerialConversionTable">
            <summary>
            Table to convert integers from the serial bus to a hex digit quickly
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Rdm630._LastSuccessfullRead">
            <summary>
            Contains the last successfull RFID tag
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Rdm630.#ctor(System.String)">
            <summary>
            Rdm630 RFID Reader
            </summary>
            <param name="Port">The serial port the Rdm630 is connected to</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Rdm630._Serial_DataReceived(System.Object,System.IO.Ports.SerialDataReceivedEventArgs)">
            <summary>
            Triggers when there is new data on the serial port
            </summary>
            <param name="Sender">The sender of the event, which is the SerialPort object</param>
            <param name="EventData">A SerialDataReceivedEventArgs object that contains the event data</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Rdm630._Rdm630_DataReceived">
            <summary>
            Triggers when a full RFID tag is scanned
            </summary>
        </member>
        <member name="E:Toolbox.NETMF.Hardware.Rdm630.DataReceived">
            <summary>
            Triggered when data has been received
            </summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.Rdm630.Tag">
            <summary>
            The most recent scanned tag
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.RgbLed">
            <summary>
            Common RGB-led
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.RgbLed._Red">
            <summary>Reference to the red pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.RgbLed._Green">
            <summary>Reference to the green pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.RgbLed._Blue">
            <summary>Reference to the blue pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.RgbLed._CommonAnode">
            <summary>True when it's common anode, false if it's common cathode</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.RgbLed.#ctor(Toolbox.NETMF.Hardware.IPWMPort,Toolbox.NETMF.Hardware.IPWMPort,Toolbox.NETMF.Hardware.IPWMPort,System.Boolean)">
            <summary>
            Common RGB-led
            </summary>
            <param name="RedPin">The PWM-pin connected to Red</param>
            <param name="GreenPin">The PWM-pin connected to Green</param>
            <param name="BluePin">The PWM-pin connected to Blue</param>
            <param name="CommonAnode">Specifies if the led is common anode</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.RgbLed.Write(System.Int32)">
            <summary>
            Sets the value of the RGB led
            </summary>
            <param name="Value">The RGB value (0x000000 to 0xffffff)</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.RgbLed.Write(System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the value of the RGB led
            </summary>
            <param name="Red">Red strength (0 to 255)</param>
            <param name="Green">Green strength (0 to 255)</param>
            <param name="Blue">Blue strength (0 to 255)</param>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.RotaryDIPSwitch">
            <summary>
            A binary Rotary DIP Switch
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.RotaryDIPSwitch._Pins">
            <summary>
            Contains references to all pins
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.RotaryDIPSwitch._LastState">
            <summary>
            Contains the last state
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.RotaryDIPSwitch.#ctor(Microsoft.SPOT.Hardware.Cpu.Pin[])">
            <summary>
            Defines a binary Rotary DIP Switch
            </summary>
            <param name="Pins">An array with the pins for each bit</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.RotaryDIPSwitch.RotaryDIPSwitch_OnInterrupt(System.UInt32,System.UInt32,System.DateTime)">
            <summary>
            Interrupt triggered when a pin changes state
            </summary>
            <param name="Pin">The pin id that's changed</param>
            <param name="State">The new state</param>
            <param name="Time">Time of the event</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.RotaryDIPSwitch.Read">
            <summary>
            Returns the current state of the switch
            </summary>
            <returns>It's current state</returns>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.RotaryDIPSwitch._Read">
            <summary>
            Reads the value of the switch
            </summary>
            <returns>The value of the switch</returns>
        </member>
        <member name="E:Toolbox.NETMF.Hardware.RotaryDIPSwitch.OnInterrupt">
            <summary>
            Event triggered when the state changes
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.RotaryEncoder">
            <summary>
            Rotary Encoder
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.RotaryEncoder._PinA">
            <summary>Reference to the interruptport on the A-pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.RotaryEncoder._PinB">
            <summary>Reference to the interruptport on the B-pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.RotaryEncoder._OddA">
            <summary>Stores the odd value of pin A</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.RotaryEncoder._OddB">
            <summary>Stores the odd value of pin B</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.RotaryEncoder._Even">
            <summary>Swaps at each measurement, we act when we got two measurements</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.RotaryEncoder.#ctor(Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin)">
            <summary>
            Initiates a rotary encoder
            </summary>
            <param name="PinA">Pin A</param>
            <param name="PinB">Pin B</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.RotaryEncoder._Pin_OnInterrupt(System.UInt32,System.UInt32,System.DateTime)">
            <summary>
            One of the pins has triggered an interrupt
            </summary>
            <param name="PinId">The Id of the pin</param>
            <param name="Value">It's new value</param>
            <param name="Time">Timestamp of the event</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.RotaryEncoder.Dispose">
            <summary>
            Frees all pins and disposes this object
            </summary>
        </member>
        <member name="E:Toolbox.NETMF.Hardware.RotaryEncoder.Rotated">
            <summary>
            This event will be triggered on rotation
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.SevenSegment">
            <summary>
            7-segment module
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.SevenSegment._ParallelPort">
            <summary>Local reference to the parallel port</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.SevenSegment._CommonAnode">
            <summary>True when the segments are common anode</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.SevenSegment._Values">
            <summary>
            Contains an array of bytes; to light the leds specific bytes need to be true. Can be changed with <see cref="M:Toolbox.NETMF.Hardware.SevenSegment.ChangeSignal(System.Byte,System.Byte)"/> and <see cref="M:Toolbox.NETMF.Hardware.SevenSegment.ChangeSignals(System.Byte[])"/>
            </summary>
            <remarks><![CDATA[
            At default, these bytes are used:
               LowerLeft = 0
               Bottom = 1
               LowerRight = 2
               UpperRight = 4
               Top = 5
               UpperLeft = 6
               Middle = 7
               (Dot = 3)
            ]]></remarks>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.SevenSegment._DotBit">
            <summary>Reference to the bit which contains the dot (4th bit by default)</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.SevenSegment._Digit">
            <summary>Contains the current displayed nummeric value</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.SevenSegment._Dot">
            <summary>Contains the current state of the dot</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.SevenSegment.#ctor(Toolbox.NETMF.Hardware.IParallelOut,System.Boolean)">
            <summary>
            Initalises a 7-segment display on a parallel port
            </summary>
            <param name="ParallelPort">The parallel port (requires at least 8 pins)</param>
            <param name="CommonAnode">Specifies if the 7-segment is common anode</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.SevenSegment.SetDigit(System.Byte)">
            <summary>
            Sets the digit to a specific number
            </summary>
            <param name="Digit">The number (0 to 9, 10 for blank)</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.SevenSegment.GetDigit">
            <summary>
            Gets the current displayed digit
            </summary>
            <returns>The displayed number (0 to 9, 10 for blank)</returns>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.SevenSegment.SetDot(System.Boolean)">
            <summary>
            Sets or unsets the dot
            </summary>
            <param name="State">True when the dot must be on</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.SevenSegment.GetDot">
            <summary>
            Gets the current state of the dot
            </summary>
            <returns></returns>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.SevenSegment._Write">
            <summary>
            Writes the byte to the 74HC595 IC
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.SevenSegment.ChangeSignal(System.Byte,System.Byte)">
            <summary>
            Changes the byte that needs to be sent to display a character (useful to customize characters)
            </summary>
            <param name="Index">The character to change (0 to 9 are actually 0 to 9 and 10 is blank, 11 to 255 are unused by default)</param>
            <param name="Signal">The byte of data that needs to be sent to the SPI bus for this character</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.SevenSegment.ChangeSignals(System.Byte[])">
            <summary>
            Changes all characters (also removes custom-made characters created with <see cref="M:Toolbox.NETMF.Hardware.SevenSegment.ChangeSignal(System.Byte,System.Byte)"/>)
            </summary>
            <param name="Signals">A new array of index versus signal</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.SevenSegment.ChangeDotSignal(System.Byte)">
            <summary>
            Changes the bit used for the dot (by default: 4)
            </summary>
            <param name="Bit">The bit in which the dot is (1 to 8)</param>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.SharpGP2Y0A02YK">
            <summary>
            Sharp Long Distance Measuring Sensor
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.SharpGP2Y0A02YK._Input">
            <summary>
            Contains a reference to the analog input port
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.SharpGP2Y0A02YK.#ctor(Toolbox.NETMF.Hardware.IADCPort)">
            <summary>
            Sharp Long Distance Measuring Sensor
            </summary>
            <param name="InputPort">Port the sensor is connected to</param>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.SharpGP2Y0A02YK.Distance">
            <summary>
            Sends back the distance in centimeters (IR sensors aren't as accurate as sonic though!)
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.HBridge">
             <summary>
             H-Bridge Motor Driver
             </summary>
             <remarks><![CDATA[
             SN754410/L293D DIP16 pin layout:
             
               16 15 14 13 12 11 10 9
               │  │  │  │  │  │  │  │
             █████████████████████████
             ▀████████████████████████
               ███████████████████████
             ▄████████████████████████
             █████████████████████████
               │  │  │  │  │  │  │  │
               1  2  3  4  5  6  7  8
             
             NOTE: The pins below aren't mentioned in pin sequence but grouped by connection
            
              3 1Y -> Motor 1 negative wire
              6 2Y -> Motor 1 positive wire
             11 1Y -> Motor 2 positive wire
             14 2Y -> Motor 3 negative wire
            
              2 1A (Motor 1 direction pin) -> Any GPIO on the Netduino, ex. pin 7
              7 2A (Motor 1 speed pin) -> Any PWM pin on the Netduino, ex. pin 6
             10 3A (Motor 2 direction pin) -> Any GPIO on the Netduino, ex. pin 4
             15 4A (Motor 2 speed pin) -> Any PWM pin on the Netduino, ex. pin 5
            
              8 Vcc2 -> Power source for the motors, ex. Vin on the Netduino
            
              4 Heatsink and ground -> Ground
              5 Heatsink and ground -> Ground
             12 Heatsink and ground -> Ground
             13 Heatsink and ground -> Ground
            
              1 1,2EN -> +5V
              9 3,4EN -> +5V
             16 Vcc1 -> +5V
             ]]></remarks>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.HBridge._Motor2Speed">
            <summary>Reference to the speed-pin of motor 2</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.HBridge._Motor1Speed">
            <summary>Reference to the speed-pin of motor 1</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.HBridge._Motor2Direction">
            <summary>Reference to the direction-pin of motor 2</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.HBridge._Motor1Direction">
            <summary>Reference to the direction-pin of motor 1</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.HBridge.#ctor(Toolbox.NETMF.Hardware.IPWMPort,Microsoft.SPOT.Hardware.Cpu.Pin,Toolbox.NETMF.Hardware.IPWMPort,Microsoft.SPOT.Hardware.Cpu.Pin)">
            <summary>
            H-Bridge-compatible Motor Driver (as used on the DFRobot Motorshield)
            </summary>
            <param name="Speed1">Motor 1 PWM control</param>
            <param name="Direction1">Motor 1 Direction control</param>
            <param name="Speed2">Motor 2 PWM control</param>
            <param name="Direction2">Motor 2 Direction control</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.HBridge.SetState(Toolbox.NETMF.Hardware.HBridge.Motors,System.SByte)">
            <summary>
            Sets the state of a motor
            </summary>
            <param name="Motor">The motor to change</param>
            <param name="Speed">The speed to move with; -100 (full speed backward) to 100 (full speed forward)</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.HBridge.Dispose">
            <summary>
            Stops both motors and disposes this class
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.HBridge.Motors">
            <summary>
            Contains all motors
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.HBridge.Motors.Motor1">
            <summary>First motor</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.HBridge.Motors.Motor2">
            <summary>Second motor</summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.Somo">
            <summary>
            SOMO-14D Driver
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Somo._DataPin">
            <summary>Reference to the data pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Somo._ClockPin">
            <summary>Reference to the clock pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Somo._BusyPin">
            <summary>Reference to the busy pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Somo._CurrentTrack">
            <summary>Stores the currently selected track</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Somo.#ctor(Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin)">
            <summary>
            New SOMO-14D Module
            </summary>
            <param name="Clock">The pin for the clock signal</param>
            <param name="Data">The pin for the data signal</param>
            <param name="Busy">The pin for the busy signal (optional)</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Somo._BusyPin_OnInterrupt(System.UInt32,System.UInt32,System.DateTime)">
            <summary>
            The busy pin interrupt has been triggered
            </summary>
            <param name="PinId">The Id of the pin</param>
            <param name="Value">The current value</param>
            <param name="Time">Timestamp of the event</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Somo.PlayRepeat(System.UInt16)">
            <summary>
            Plays a track infinitely in the backround, until we get a Stop command
            </summary>
            <param name="TrackNo"></param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Somo.PlayTrack(System.UInt16,System.Boolean)">
            <summary>
            Plays a specific track
            </summary>
            <param name="TrackNo">The number of the track (0 to 511)</param>
            <param name="Wait">When the Busy pin is defined, and this is true, this method won't return until the track is finished.</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Somo.SetVolume(System.SByte)">
            <summary>
            Sets the volume
            </summary>
            <param name="Volume">The volume (0 to 7)</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Somo.PlayPause">
            <summary>
            Plays or pauses the current track
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Somo.Stop">
            <summary>
            Stops the current track
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Somo._SendByte(System.UInt16)">
            <summary>
            Sends a byte, bitbanged over the serial protocol
            </summary>
            <param name="Byte">The 16-bit byte to send</param>
        </member>
        <member name="E:Toolbox.NETMF.Hardware.Somo.OnStartPlaying">
            <summary>Event is triggered when a track starts playing</summary>
        </member>
        <member name="E:Toolbox.NETMF.Hardware.Somo.OnStopPlaying">
            <summary>Event is triggered when a track stops playing</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.Somo.IsPlaying">
            <summary>
            Returns true when the module is playing. Requires the Busy signal.
            </summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.Somo.CurrentTrack">
            <summary>
            The currently selected track
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.Speaker">
            <summary>
            Simple Speaker interface
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Speaker._Speaker">
            <summary>
            Stores a reference to the PWM device of the speaker
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Speaker._Tonebar">
            <summary>
            Contains 120 periods from A to G# from octave 0 to 9
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Speaker._PlayLength">
            <summary>
            The length of each note (1 - 64). L1 is whole note, L2 is half note, etc.
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Speaker._PlayTempo">
            <summary>
            The tempo in quarter notes per minute (32 - 255).
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Speaker._PlayOctave">
            <summary>
            The octave the Play-method currently is in.
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Speaker._PlayMode">
            <summary>
            Holds the play mode the Play-method currently is in.
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Speaker.Play(System.String)">
            <summary>
            Plays musical notes. See also: http://netmftoolbox.codeplex.com/wikipage?title=Toolbox.NETMF.Hardware.Speaker
            </summary>
            <example><![CDATA[
            Octave and tone commands:
              Ooctave    Sets the current octave (0 - 9).
              < or >     Moves up or down one octave.
              A - G      Plays the specified note in the current octave.
              Nnote      Plays a specified note (0 - 84) in the seven octave
                         range (0 is a rest).
            
            Duration and tempo commands:
              Llength    Sets the length of each note (1 - 64). L1 is whole note,
                         L2 is half note, etc.
              ML         Sets music legato.
              MN         Sets music normal.
              MS         Sets music staccato.
              Ppause     Specifies a pause (1 - 64). P1 is a whole-note pause,
                         P2 is a half-note pause, etc.
              Ttempo     Sets the tempo in quarter notes per minute (32 - 255).
              
            Mode commands:
              MF         Plays music in foreground.
              MB         Plays music in background.
            
            Suffix commands:
              # or +     Turns preceding note into a sharp.
              -          Turns preceding note into a flat.
              .          Plays the preceding note 3/2 as long as specified.
            
            See also: http://netmftoolbox.codeplex.com/wikipage?title=Toolbox.NETMF.Hardware.Speaker
            ]]></example>
            <param name="CommandString">A string expression that contains one or more of the PLAY commands.</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Speaker._PlayBackground(System.String)">
            <summary>
            Plays a song in the background
            </summary>
            <param name="CommandString">The song to play</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Speaker._PlayNote(System.Byte,System.Byte,System.Byte)">
            <summary>
            Plays a note
            </summary>
            <param name="Note">The note (0 to 84)</param>
            <param name="Tempo">The tempo in quarter notes per minute (32 - 255).</param>
            <param name="Length">The length of each note (1 - 64). L1 is whole note, L2 is half note, etc.</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Speaker.#ctor(Toolbox.NETMF.Hardware.IPWMPort)">
            <summary>
            Defines a speaker
            </summary>
            <param name="PwmPort">The PWM port the speaker is connected to</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Speaker.Sound(System.Single,System.Single)">
            <summary>
            Generates a sound through your speaker.
            </summary>
            <param name="Frequency">The frequency of the sound in hertz; a value in the range 37 through 32,767</param>
            <param name="Duration">The number of ticks the sound should last; a value in the range 0 through 65,535. There are 18.2 ticks per second.</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Speaker.Beep">
            <summary>
            Generates a beep sound from your speaker.
            </summary>
        </member>
        <member name="E:Toolbox.NETMF.Hardware.Speaker.OnPlay">
            <summary>
            Triggered after each played note. data2 contains the remaining bytes to play
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.Speaker._PlayModes">
            <summary>
            All existing play modes
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.ThumbJoystick">
            <summary>
            Analog thumb joystick
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.ThumbJoystick._Horizontal">
            <summary>Reference to the horizontal pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.ThumbJoystick._Vertical">
            <summary>Reference to the vertical pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.ThumbJoystick._Push">
            <summary>Reference to the push pin</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.ThumbJoystick.#ctor(Toolbox.NETMF.Hardware.IADCPort,Toolbox.NETMF.Hardware.IADCPort,Microsoft.SPOT.Hardware.Cpu.Pin,System.Boolean,System.Boolean)">
            <summary>
            Analog thumb joystick
            </summary>
            <param name="HorizontalPin">Analog pin for the horizontal bar</param>
            <param name="VerticalPin">Analog pin for the vertical bar</param>
            <param name="PushPin">Pin for the push button (optionally this class handles the push button)</param>
            <param name="InvertHorizontal">When true, the horizontal value will be inverted</param>
            <param name="InvertVertical">When true, the vertical value will be inverted</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.ThumbJoystick.Dispose">
            <summary>
            Disposes this object
            </summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.ThumbJoystick.InvertHorizontal">
            <summary>When true, the horizontal value will be inverted</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.ThumbJoystick.InvertVertical">
            <summary>When true, the vertical value will be inverted</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.ThumbJoystick.HorizontalValue">
            <summary>
            Returns the horizontal state (-50 to 50)
            </summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.ThumbJoystick.VerticalValue">
            <summary>
            Returns the vertical state (-50 to 50)
            </summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.ThumbJoystick.PushValue">
            <summary>
            Returns the pushed state (false or true)
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.Tmp36">
            <summary>
            TMP36 Temperature Sensor
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Tmp36._AnalogPort">
            <summary>
            Reference to the analog input
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Tmp36.#ctor(Toolbox.NETMF.Hardware.IADCPort)">
            <summary>
            TMP 36GZ Temperature Sensor
            </summary>
            <param name="AnalogPort">The port the sensor is connected to</param>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.Tmp36.Temperature">
            <summary>
            Returns the current temperature in Celcius
            </summary>
            <example>
            To read others then Celcius, try this:
            <code><![CDATA[
            float celcius = [this].Temperature;
            float kelvin = (float)(celcius + 273.15);
            float fahrenheit = (float)((celcius * 1.8) + 32.0);
            ]]></code>
            </example>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.WearableKeypad">
            <summary>
            Driver for Sparkfun's Wearable Keypad
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.WearableKeypad._Pin1">
            <summary>Reference to pin P5.1</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.WearableKeypad._Pin2">
            <summary>Reference to pin P5.2</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.WearableKeypad._Pin3">
            <summary>Reference to pin P5.3</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.WearableKeypad.#ctor(Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin)">
            <summary>
            Initializes the driver for Sparkfun's Wearable Keypad
            </summary>
            <param name="Pin1">Pin P5.1 from the keypad</param>
            <param name="Pin2">Pin P5.2 from the keypad</param>
            <param name="Pin3">Pin P5.3 from the keypad</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.WearableKeypad.Read">
            <summary>
            Reads the current value
            </summary>
            <returns>The value of the keypad (0=up, 1=right, 2=down, 3=left, 4=center) or -1 when nothing is pressed</returns>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.WearableKeypad.Dispose">
            <summary>
            Disposes this object and frees the pins
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.WiiNunchuk">
            <summary>
            Wii Nunchuk
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.WiiNunchuk._Device">
            <summary>
            Reference to the I²C bus
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.WiiNunchuk.#ctor(System.UInt16,System.Int32)">
            <summary>
            Initialises a new Wii Nunchuk
            </summary>
            <param name="Address">The I²C address</param>
            <param name="ClockRateKhz">The speed in Khz</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.WiiNunchuk.Read">
            <summary>
            Reads all data from the nunchuk
            </summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.WiiNunchuk.AnalogStickX">
            <summary>Analog stick X axis value</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.WiiNunchuk.AnalogStickY">
            <summary>Analog stick Y axis value</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.WiiNunchuk.AcceleroMeterX">
            <summary>Accelerometer X axis value</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.WiiNunchuk.AcceleroMeterY">
            <summary>Accelerometer Y axis value</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.WiiNunchuk.AcceleroMeterZ">
            <summary>Accelerometer Z axis value</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.WiiNunchuk.ButtonC">
            <summary>C-Button value</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.WiiNunchuk.ButtonZ">
            <summary>Z-Button value</summary>
        </member>
    </members>
</doc>
